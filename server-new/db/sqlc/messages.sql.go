// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: messages.sql

package db

import (
	"context"
	"database/sql"
)

const getMessageById = `-- name: GetMessageById :one
select id, text, user_id, room_id from messages m where m.id = 1
`

func (q *Queries) GetMessageById(ctx context.Context) (Message, error) {
	row := q.queryRow(ctx, q.getMessageByIdStmt, getMessageById)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.UserID,
		&i.RoomID,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT messages.id, text, user_id, room_id, u.id, name FROM messages
INNER JOIN users u on u.id = messages.user_id
WHERE room_id = 1
ORDER BY messages.id
`

type ListMessagesRow struct {
	ID     int32         `json:"id"`
	Text   string        `json:"text"`
	UserID sql.NullInt32 `json:"user_id"`
	RoomID sql.NullInt32 `json:"room_id"`
	ID_2   int32         `json:"id_2"`
	Name   string        `json:"name"`
}

func (q *Queries) ListMessages(ctx context.Context) ([]ListMessagesRow, error) {
	rows, err := q.query(ctx, q.listMessagesStmt, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMessagesRow
	for rows.Next() {
		var i ListMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.UserID,
			&i.RoomID,
			&i.ID_2,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
